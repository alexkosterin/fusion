// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mcb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* mcb_reg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_reg_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mreg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mreg_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mopen_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mopen_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mopen_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mopen_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mlink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mlink_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_munlink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_munlink_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mmove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mmove_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mlist_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mlist_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mlist_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mlist_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mstat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mstat_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mattr_read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mattr_read_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mattr_write_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mattr_write_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mattrs_read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mattrs_read_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_msave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_msave_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_mload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_mload_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_sysinfo_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_sysinfo_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_sysinfo_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_sysinfo_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_sysinfo_client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_sysinfo_client_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_sysinfo_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_sysinfo_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* mcb_sysinfo_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mcb_sysinfo_reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MCB_SYSINFO_FLAGS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mcb_2eproto() {
  protobuf_AddDesc_mcb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mcb.proto");
  GOOGLE_CHECK(file != NULL);
  mcb_reg_descriptor_ = file->message_type(0);
  static const int mcb_reg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, ver_maj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, ver_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, pswd_),
  };
  mcb_reg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_reg_descriptor_,
      mcb_reg::default_instance_,
      mcb_reg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_reg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_reg));
  mcb_subscribe_descriptor_ = file->message_type(1);
  static const int mcb_subscribe_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_subscribe, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_subscribe, flags_),
  };
  mcb_subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_subscribe_descriptor_,
      mcb_subscribe::default_instance_,
      mcb_subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_subscribe));
  mcb_mreg_descriptor_ = file->message_type(2);
  static const int mcb_mreg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mreg, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mreg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mreg, gid_),
  };
  mcb_mreg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mreg_descriptor_,
      mcb_mreg::default_instance_,
      mcb_mreg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mreg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mreg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mreg));
  mcb_mopen_req_descriptor_ = file->message_type(3);
  static const int mcb_mopen_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, data_),
  };
  mcb_mopen_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mopen_req_descriptor_,
      mcb_mopen_req::default_instance_,
      mcb_mopen_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mopen_req));
  mcb_mopen_rep_descriptor_ = file->message_type(4);
  static const int mcb_mopen_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_rep, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_rep, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_rep, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_rep, already_opened_),
  };
  mcb_mopen_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mopen_rep_descriptor_,
      mcb_mopen_rep::default_instance_,
      mcb_mopen_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mopen_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mopen_rep));
  mcb_mlink_descriptor_ = file->message_type(5);
  static const int mcb_mlink_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlink, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlink, orig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlink, soft_),
  };
  mcb_mlink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mlink_descriptor_,
      mcb_mlink::default_instance_,
      mcb_mlink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mlink));
  mcb_munlink_descriptor_ = file->message_type(6);
  static const int mcb_munlink_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_munlink, name_),
  };
  mcb_munlink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_munlink_descriptor_,
      mcb_munlink::default_instance_,
      mcb_munlink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_munlink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_munlink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_munlink));
  mcb_mmove_descriptor_ = file->message_type(7);
  static const int mcb_mmove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mmove, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mmove, to_),
  };
  mcb_mmove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mmove_descriptor_,
      mcb_mmove::default_instance_,
      mcb_mmove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mmove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mmove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mmove));
  mcb_mlist_req_descriptor_ = file->message_type(8);
  static const int mcb_mlist_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_req, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_req, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_req, profile_),
  };
  mcb_mlist_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mlist_req_descriptor_,
      mcb_mlist_req::default_instance_,
      mcb_mlist_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mlist_req));
  mcb_mlist_rep_descriptor_ = file->message_type(9);
  static const int mcb_mlist_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_rep, names_),
  };
  mcb_mlist_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mlist_rep_descriptor_,
      mcb_mlist_rep::default_instance_,
      mcb_mlist_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mlist_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mlist_rep));
  mcb_mstat_descriptor_ = file->message_type(10);
  static const int mcb_mstat_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_nlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, st_ctime_),
  };
  mcb_mstat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mstat_descriptor_,
      mcb_mstat::default_instance_,
      mcb_mstat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mstat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mstat));
  mcb_mattr_read_descriptor_ = file->message_type(11);
  static const int mcb_mattr_read_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_read, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_read, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_read, len_),
  };
  mcb_mattr_read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mattr_read_descriptor_,
      mcb_mattr_read::default_instance_,
      mcb_mattr_read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mattr_read));
  mcb_mattr_write_descriptor_ = file->message_type(12);
  static const int mcb_mattr_write_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_write, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_write, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_write, value_),
  };
  mcb_mattr_write_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mattr_write_descriptor_,
      mcb_mattr_write::default_instance_,
      mcb_mattr_write_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_write, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattr_write, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mattr_write));
  mcb_mattrs_read_descriptor_ = file->message_type(13);
  static const int mcb_mattrs_read_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattrs_read, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattrs_read, len_),
  };
  mcb_mattrs_read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mattrs_read_descriptor_,
      mcb_mattrs_read::default_instance_,
      mcb_mattrs_read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattrs_read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mattrs_read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mattrs_read));
  mcb_msave_descriptor_ = file->message_type(14);
  static const int mcb_msave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_msave, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_msave, sep_),
  };
  mcb_msave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_msave_descriptor_,
      mcb_msave::default_instance_,
      mcb_msave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_msave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_msave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_msave));
  mcb_mload_descriptor_ = file->message_type(15);
  static const int mcb_mload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mload, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mload, sep_),
  };
  mcb_mload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_mload_descriptor_,
      mcb_mload::default_instance_,
      mcb_mload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_mload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_mload));
  mcb_sysinfo_request_descriptor_ = file->message_type(16);
  static const int mcb_sysinfo_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_request, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_request, cids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_request, mids_),
  };
  mcb_sysinfo_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_sysinfo_request_descriptor_,
      mcb_sysinfo_request::default_instance_,
      mcb_sysinfo_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_sysinfo_request));
  mcb_sysinfo_common_descriptor_ = file->message_type(17);
  static const int mcb_sysinfo_common_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, avail_mcbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, allocated_mcbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, prealloc_mcbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, max_alloc_mcbs_),
  };
  mcb_sysinfo_common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_sysinfo_common_descriptor_,
      mcb_sysinfo_common::default_instance_,
      mcb_sysinfo_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_sysinfo_common));
  mcb_sysinfo_client_descriptor_ = file->message_type(18);
  static const int mcb_sysinfo_client_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, default_profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, profiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, clock_sync_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, connection_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, output_queue_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, output_queue_size_),
  };
  mcb_sysinfo_client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_sysinfo_client_descriptor_,
      mcb_sysinfo_client::default_instance_,
      mcb_sysinfo_client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_sysinfo_client));
  mcb_sysinfo_message_descriptor_ = file->message_type(19);
  static const int mcb_sysinfo_message_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, oflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, sflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, open_nr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, subs_nr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, snd_nr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, rcv_nr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, avg_snd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, avg_rcv_),
  };
  mcb_sysinfo_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_sysinfo_message_descriptor_,
      mcb_sysinfo_message::default_instance_,
      mcb_sysinfo_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_sysinfo_message));
  mcb_sysinfo_reply_descriptor_ = file->message_type(20);
  static const int mcb_sysinfo_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_reply, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_reply, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_reply, clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_reply, messages_),
  };
  mcb_sysinfo_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mcb_sysinfo_reply_descriptor_,
      mcb_sysinfo_reply::default_instance_,
      mcb_sysinfo_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mcb_sysinfo_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mcb_sysinfo_reply));
  MCB_SYSINFO_FLAGS_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mcb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_reg_descriptor_, &mcb_reg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_subscribe_descriptor_, &mcb_subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mreg_descriptor_, &mcb_mreg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mopen_req_descriptor_, &mcb_mopen_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mopen_rep_descriptor_, &mcb_mopen_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mlink_descriptor_, &mcb_mlink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_munlink_descriptor_, &mcb_munlink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mmove_descriptor_, &mcb_mmove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mlist_req_descriptor_, &mcb_mlist_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mlist_rep_descriptor_, &mcb_mlist_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mstat_descriptor_, &mcb_mstat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mattr_read_descriptor_, &mcb_mattr_read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mattr_write_descriptor_, &mcb_mattr_write::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mattrs_read_descriptor_, &mcb_mattrs_read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_msave_descriptor_, &mcb_msave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_mload_descriptor_, &mcb_mload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_sysinfo_request_descriptor_, &mcb_sysinfo_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_sysinfo_common_descriptor_, &mcb_sysinfo_common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_sysinfo_client_descriptor_, &mcb_sysinfo_client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_sysinfo_message_descriptor_, &mcb_sysinfo_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mcb_sysinfo_reply_descriptor_, &mcb_sysinfo_reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mcb_2eproto() {
  delete mcb_reg::default_instance_;
  delete mcb_reg_reflection_;
  delete mcb_subscribe::default_instance_;
  delete mcb_subscribe_reflection_;
  delete mcb_mreg::default_instance_;
  delete mcb_mreg_reflection_;
  delete mcb_mopen_req::default_instance_;
  delete mcb_mopen_req_reflection_;
  delete mcb_mopen_rep::default_instance_;
  delete mcb_mopen_rep_reflection_;
  delete mcb_mlink::default_instance_;
  delete mcb_mlink_reflection_;
  delete mcb_munlink::default_instance_;
  delete mcb_munlink_reflection_;
  delete mcb_mmove::default_instance_;
  delete mcb_mmove_reflection_;
  delete mcb_mlist_req::default_instance_;
  delete mcb_mlist_req_reflection_;
  delete mcb_mlist_rep::default_instance_;
  delete mcb_mlist_rep_reflection_;
  delete mcb_mstat::default_instance_;
  delete mcb_mstat_reflection_;
  delete mcb_mattr_read::default_instance_;
  delete mcb_mattr_read_reflection_;
  delete mcb_mattr_write::default_instance_;
  delete mcb_mattr_write_reflection_;
  delete mcb_mattrs_read::default_instance_;
  delete mcb_mattrs_read_reflection_;
  delete mcb_msave::default_instance_;
  delete mcb_msave_reflection_;
  delete mcb_mload::default_instance_;
  delete mcb_mload_reflection_;
  delete mcb_sysinfo_request::default_instance_;
  delete mcb_sysinfo_request_reflection_;
  delete mcb_sysinfo_common::default_instance_;
  delete mcb_sysinfo_common_reflection_;
  delete mcb_sysinfo_client::default_instance_;
  delete mcb_sysinfo_client_reflection_;
  delete mcb_sysinfo_message::default_instance_;
  delete mcb_sysinfo_message_reflection_;
  delete mcb_sysinfo_reply::default_instance_;
  delete mcb_sysinfo_reply_reflection_;
}

void protobuf_AddDesc_mcb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmcb.proto\"f\n\007mcb_reg\022\017\n\007ver_maj\030\001 \002(\r\022"
    "\017\n\007ver_min\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\017\n\007profil"
    "e\030\004 \003(\t\022\014\n\004uuid\030\005 \001(\014\022\014\n\004pswd\030\006 \001(\t\"+\n\rm"
    "cb_subscribe\022\013\n\003mid\030\001 \002(\r\022\r\n\005flags\030\002 \002(\r"
    "\"2\n\010mcb_mreg\022\014\n\004user\030\001 \002(\t\022\013\n\003uid\030\002 \002(\r\022"
    "\013\n\003gid\030\003 \002(\r\"V\n\rmcb_mopen_req\022\014\n\004name\030\001 "
    "\002(\t\022\r\n\005flags\030\002 \002(\r\022\014\n\004type\030\003 \001(\r\022\014\n\004size"
    "\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"P\n\rmcb_mopen_rep\022\013\n"
    "\003mid\030\001 \002(\r\022\014\n\004type\030\002 \001(\r\022\014\n\004size\030\003 \001(\r\022\026"
    "\n\016already_opened\030\004 \001(\010\"5\n\tmcb_mlink\022\014\n\004l"
    "ink\030\001 \002(\t\022\014\n\004orig\030\002 \002(\t\022\014\n\004soft\030\003 \002(\010\"\033\n"
    "\013mcb_munlink\022\014\n\004name\030\001 \002(\t\"%\n\tmcb_mmove\022"
    "\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \002(\t\"=\n\rmcb_mlist_r"
    "eq\022\014\n\004mask\030\001 \001(\t\022\r\n\005flags\030\002 \001(\r\022\017\n\007profi"
    "le\030\003 \001(\t\"\036\n\rmcb_mlist_rep\022\r\n\005names\030\001 \003(\t"
    "\"\245\001\n\tmcb_mstat\022\016\n\006st_mid\030\001 \002(\r\022\017\n\007st_typ"
    "e\030\002 \002(\r\022\020\n\010st_nlink\030\003 \002(\r\022\016\n\006st_uid\030\004 \002("
    "\r\022\016\n\006st_gid\030\005 \002(\r\022\017\n\007st_size\030\006 \002(\r\022\020\n\010st"
    "_atime\030\007 \002(\r\022\020\n\010st_mtime\030\010 \002(\r\022\020\n\010st_cti"
    "me\030\t \002(\004\"7\n\016mcb_mattr_read\022\013\n\003mid\030\001 \002(\r\022"
    "\013\n\003key\030\002 \002(\t\022\013\n\003len\030\003 \002(\r\":\n\017mcb_mattr_w"
    "rite\022\013\n\003mid\030\001 \002(\r\022\013\n\003key\030\002 \002(\t\022\r\n\005value\030"
    "\003 \002(\t\"+\n\017mcb_mattrs_read\022\013\n\003mid\030\001 \002(\r\022\013\n"
    "\003len\030\002 \002(\r\"%\n\tmcb_msave\022\013\n\003len\030\001 \002(\r\022\013\n\003"
    "sep\030\002 \002(\t\"&\n\tmcb_mload\022\014\n\004text\030\001 \002(\t\022\013\n\003"
    "sep\030\002 \002(\t\"@\n\023mcb_sysinfo_request\022\r\n\005flag"
    "s\030\001 \002(\005\022\014\n\004cids\030\002 \003(\005\022\014\n\004mids\030\003 \003(\005\"\203\001\n\022"
    "mcb_sysinfo_common\022\022\n\nstart_time\030\001 \001(\005\022\022"
    "\n\navail_mcbs\030\002 \001(\005\022\026\n\016allocated_mcbs\030\003 \001"
    "(\005\022\025\n\rprealloc_mcbs\030\004 \001(\005\022\026\n\016max_alloc_m"
    "cbs\030\010 \001(\005\"\213\002\n\022mcb_sysinfo_client\022\013\n\003cid\030"
    "\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004uuid\030\003 \001(\014\022\017\n\007add"
    "ress\030\004 \001(\t\022\027\n\017default_profile\030\005 \001(\t\022\020\n\010p"
    "rofiles\030\006 \003(\t\022\016\n\006groups\030\007 \003(\t\022\022\n\nstart_t"
    "ime\030\010 \001(\005\022\031\n\021clock_sync_period\030\t \001(\005\022\032\n\022"
    "connection_latency\030\n \001(\005\022\032\n\022output_queue"
    "_limit\030\013 \001(\005\022\031\n\021output_queue_size\030\014 \001(\005\""
    "\317\001\n\023mcb_sysinfo_message\022\013\n\003mid\030\001 \002(\005\022\013\n\003"
    "cid\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004path\030\004 \001(\t\022\016\n"
    "\006oflags\030\005 \001(\005\022\016\n\006sflags\030\006 \001(\005\022\017\n\007open_nr"
    "\030\007 \001(\005\022\017\n\007subs_nr\030\010 \001(\005\022\016\n\006snd_nr\030\t \001(\005\022"
    "\016\n\006rcv_nr\030\n \001(\005\022\017\n\007avg_snd\030\013 \001(\005\022\017\n\007avg_"
    "rcv\030\014 \001(\005\"\225\001\n\021mcb_sysinfo_reply\022\r\n\005flags"
    "\030\001 \002(\005\022#\n\006common\030\002 \001(\0132\023.mcb_sysinfo_com"
    "mon\022$\n\007clients\030\003 \003(\0132\023.mcb_sysinfo_clien"
    "t\022&\n\010messages\030\004 \003(\0132\024.mcb_sysinfo_messag"
    "e*\332\004\n\021MCB_SYSINFO_FLAGS\022\017\n\013SYS_CLIENTS\020\001"
    "\022\020\n\014SYS_MESSAGES\020\002\022\027\n\023SYS_CLIENT_MESSAGE"
    "S\020\004\022\022\n\016COM_START_TIME\020\010\022\022\n\016COM_AVAIL_MCB"
    "S\020\020\022\026\n\022COM_ALLOCATED_MCBS\020 \022\025\n\021COM_PREAL"
    "LOC_MCBS\020@\022\027\n\022COM_MAX_ALLOC_MCBS\020\200\001\022\r\n\010C"
    "LI_NAME\020\200\002\022\r\n\010CLI_UUID\020\200\004\022\020\n\013CLI_ADDRESS"
    "\020\200\010\022\030\n\023CLI_DEFAULT_PROFILE\020\200\020\022\021\n\014CLI_PRO"
    "FILES\020\200 \022\017\n\nCLI_GROUPS\020\200@\022\024\n\016CLI_START_T"
    "IME\020\200\200\001\022\025\n\017CLI_SYNC_PERIOD\020\200\200\002\022\026\n\020CLI_CO"
    "NN_LATENCY\020\200\200\004\022\025\n\017CLI_QUEUE_LIMIT\020\200\200\010\022\024\n"
    "\016CLI_QUEUE_SIZE\020\200\200\020\022\016\n\010MSG_NAME\020\200\200 \022\016\n\010M"
    "SG_PATH\020\200\200@\022\020\n\tMSG_OFLAG\020\200\200\200\001\022\020\n\tMSG_SFL"
    "AG\020\200\200\200\002\022\022\n\013MSG_OPEN_NR\020\200\200\200\004\022\022\n\013MSG_SUBS_"
    "NR\020\200\200\200\010\022\021\n\nMSG_SND_NR\020\200\200\200\020\022\021\n\nMSG_RCV_NR"
    "\020\200\200\200 \022\022\n\013MSG_SND_AVG\020\200\200\200@\022\023\n\013MSG_RCV_AVG"
    "\020\200\200\200\200\001B\002H\001", 2450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mcb.proto", &protobuf_RegisterTypes);
  mcb_reg::default_instance_ = new mcb_reg();
  mcb_subscribe::default_instance_ = new mcb_subscribe();
  mcb_mreg::default_instance_ = new mcb_mreg();
  mcb_mopen_req::default_instance_ = new mcb_mopen_req();
  mcb_mopen_rep::default_instance_ = new mcb_mopen_rep();
  mcb_mlink::default_instance_ = new mcb_mlink();
  mcb_munlink::default_instance_ = new mcb_munlink();
  mcb_mmove::default_instance_ = new mcb_mmove();
  mcb_mlist_req::default_instance_ = new mcb_mlist_req();
  mcb_mlist_rep::default_instance_ = new mcb_mlist_rep();
  mcb_mstat::default_instance_ = new mcb_mstat();
  mcb_mattr_read::default_instance_ = new mcb_mattr_read();
  mcb_mattr_write::default_instance_ = new mcb_mattr_write();
  mcb_mattrs_read::default_instance_ = new mcb_mattrs_read();
  mcb_msave::default_instance_ = new mcb_msave();
  mcb_mload::default_instance_ = new mcb_mload();
  mcb_sysinfo_request::default_instance_ = new mcb_sysinfo_request();
  mcb_sysinfo_common::default_instance_ = new mcb_sysinfo_common();
  mcb_sysinfo_client::default_instance_ = new mcb_sysinfo_client();
  mcb_sysinfo_message::default_instance_ = new mcb_sysinfo_message();
  mcb_sysinfo_reply::default_instance_ = new mcb_sysinfo_reply();
  mcb_reg::default_instance_->InitAsDefaultInstance();
  mcb_subscribe::default_instance_->InitAsDefaultInstance();
  mcb_mreg::default_instance_->InitAsDefaultInstance();
  mcb_mopen_req::default_instance_->InitAsDefaultInstance();
  mcb_mopen_rep::default_instance_->InitAsDefaultInstance();
  mcb_mlink::default_instance_->InitAsDefaultInstance();
  mcb_munlink::default_instance_->InitAsDefaultInstance();
  mcb_mmove::default_instance_->InitAsDefaultInstance();
  mcb_mlist_req::default_instance_->InitAsDefaultInstance();
  mcb_mlist_rep::default_instance_->InitAsDefaultInstance();
  mcb_mstat::default_instance_->InitAsDefaultInstance();
  mcb_mattr_read::default_instance_->InitAsDefaultInstance();
  mcb_mattr_write::default_instance_->InitAsDefaultInstance();
  mcb_mattrs_read::default_instance_->InitAsDefaultInstance();
  mcb_msave::default_instance_->InitAsDefaultInstance();
  mcb_mload::default_instance_->InitAsDefaultInstance();
  mcb_sysinfo_request::default_instance_->InitAsDefaultInstance();
  mcb_sysinfo_common::default_instance_->InitAsDefaultInstance();
  mcb_sysinfo_client::default_instance_->InitAsDefaultInstance();
  mcb_sysinfo_message::default_instance_->InitAsDefaultInstance();
  mcb_sysinfo_reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mcb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mcb_2eproto {
  StaticDescriptorInitializer_mcb_2eproto() {
    protobuf_AddDesc_mcb_2eproto();
  }
} static_descriptor_initializer_mcb_2eproto_;
const ::google::protobuf::EnumDescriptor* MCB_SYSINFO_FLAGS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCB_SYSINFO_FLAGS_descriptor_;
}
bool MCB_SYSINFO_FLAGS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
    case 268435456:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_reg::kVerMajFieldNumber;
const int mcb_reg::kVerMinFieldNumber;
const int mcb_reg::kNameFieldNumber;
const int mcb_reg::kProfileFieldNumber;
const int mcb_reg::kUuidFieldNumber;
const int mcb_reg::kPswdFieldNumber;
#endif  // !_MSC_VER

mcb_reg::mcb_reg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_reg::InitAsDefaultInstance() {
}

mcb_reg::mcb_reg(const mcb_reg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_reg::SharedCtor() {
  _cached_size_ = 0;
  ver_maj_ = 0u;
  ver_min_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_reg::~mcb_reg() {
  SharedDtor();
}

void mcb_reg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void mcb_reg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_reg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_reg_descriptor_;
}

const mcb_reg& mcb_reg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_reg* mcb_reg::default_instance_ = NULL;

mcb_reg* mcb_reg::New() const {
  return new mcb_reg;
}

void mcb_reg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_maj_ = 0u;
    ver_min_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::kEmptyString) {
        pswd_->clear();
      }
    }
  }
  profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_reg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ver_maj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_maj_)));
          set_has_ver_maj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ver_min;
        break;
      }

      // required uint32 ver_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_min_)));
          set_has_ver_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_profile;
        break;
      }

      // repeated string profile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_profile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profile(this->profile_size() - 1).data(),
            this->profile(this->profile_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_profile;
        if (input->ExpectTag(42)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pswd;
        break;
      }

      // optional string pswd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_reg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ver_maj = 1;
  if (has_ver_maj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver_maj(), output);
  }

  // required uint32 ver_min = 2;
  if (has_ver_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver_min(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated string profile = 4;
  for (int i = 0; i < this->profile_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->profile(i).data(), this->profile(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->profile(i), output);
  }

  // optional bytes uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->uuid(), output);
  }

  // optional string pswd = 6;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_reg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ver_maj = 1;
  if (has_ver_maj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver_maj(), target);
  }

  // required uint32 ver_min = 2;
  if (has_ver_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver_min(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated string profile = 4;
  for (int i = 0; i < this->profile_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile(i).data(), this->profile(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->profile(i), target);
  }

  // optional bytes uuid = 5;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->uuid(), target);
  }

  // optional string pswd = 6;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_reg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ver_maj = 1;
    if (has_ver_maj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver_maj());
    }

    // required uint32 ver_min = 2;
    if (has_ver_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver_min());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional string pswd = 6;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

  }
  // repeated string profile = 4;
  total_size += 1 * this->profile_size();
  for (int i = 0; i < this->profile_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->profile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_reg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_reg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_reg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_reg::MergeFrom(const mcb_reg& from) {
  GOOGLE_CHECK_NE(&from, this);
  profile_.MergeFrom(from.profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver_maj()) {
      set_ver_maj(from.ver_maj());
    }
    if (from.has_ver_min()) {
      set_ver_min(from.ver_min());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_reg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_reg::CopyFrom(const mcb_reg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_reg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mcb_reg::Swap(mcb_reg* other) {
  if (other != this) {
    std::swap(ver_maj_, other->ver_maj_);
    std::swap(ver_min_, other->ver_min_);
    std::swap(name_, other->name_);
    profile_.Swap(&other->profile_);
    std::swap(uuid_, other->uuid_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_reg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_reg_descriptor_;
  metadata.reflection = mcb_reg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_subscribe::kMidFieldNumber;
const int mcb_subscribe::kFlagsFieldNumber;
#endif  // !_MSC_VER

mcb_subscribe::mcb_subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_subscribe::InitAsDefaultInstance() {
}

mcb_subscribe::mcb_subscribe(const mcb_subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_subscribe::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_subscribe::~mcb_subscribe() {
  SharedDtor();
}

void mcb_subscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_subscribe_descriptor_;
}

const mcb_subscribe& mcb_subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_subscribe* mcb_subscribe::default_instance_ = NULL;

mcb_subscribe* mcb_subscribe::New() const {
  return new mcb_subscribe;
}

void mcb_subscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 0u;
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mid(), target);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_subscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mid());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_subscribe::MergeFrom(const mcb_subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_subscribe::CopyFrom(const mcb_subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_subscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mcb_subscribe::Swap(mcb_subscribe* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_subscribe_descriptor_;
  metadata.reflection = mcb_subscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mreg::kUserFieldNumber;
const int mcb_mreg::kUidFieldNumber;
const int mcb_mreg::kGidFieldNumber;
#endif  // !_MSC_VER

mcb_mreg::mcb_mreg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mreg::InitAsDefaultInstance() {
}

mcb_mreg::mcb_mreg(const mcb_mreg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mreg::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0u;
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mreg::~mcb_mreg() {
  SharedDtor();
}

void mcb_mreg::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mreg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mreg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mreg_descriptor_;
}

const mcb_mreg& mcb_mreg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mreg* mcb_mreg::default_instance_ = NULL;

mcb_mreg* mcb_mreg::New() const {
  return new mcb_mreg;
}

void mcb_mreg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    uid_ = 0u;
    gid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mreg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required uint32 gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mreg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mreg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mreg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mreg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mreg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mreg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mreg::MergeFrom(const mcb_mreg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mreg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mreg::CopyFrom(const mcb_mreg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mreg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mcb_mreg::Swap(mcb_mreg* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mreg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mreg_descriptor_;
  metadata.reflection = mcb_mreg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mopen_req::kNameFieldNumber;
const int mcb_mopen_req::kFlagsFieldNumber;
const int mcb_mopen_req::kTypeFieldNumber;
const int mcb_mopen_req::kSizeFieldNumber;
const int mcb_mopen_req::kDataFieldNumber;
#endif  // !_MSC_VER

mcb_mopen_req::mcb_mopen_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mopen_req::InitAsDefaultInstance() {
}

mcb_mopen_req::mcb_mopen_req(const mcb_mopen_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mopen_req::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  type_ = 0u;
  size_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mopen_req::~mcb_mopen_req() {
  SharedDtor();
}

void mcb_mopen_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mopen_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mopen_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mopen_req_descriptor_;
}

const mcb_mopen_req& mcb_mopen_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mopen_req* mcb_mopen_req::default_instance_ = NULL;

mcb_mopen_req* mcb_mopen_req::New() const {
  return new mcb_mopen_req;
}

void mcb_mopen_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flags_ = 0u;
    type_ = 0u;
    size_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mopen_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mopen_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mopen_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mopen_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mopen_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mopen_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mopen_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mopen_req::MergeFrom(const mcb_mopen_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mopen_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mopen_req::CopyFrom(const mcb_mopen_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mopen_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mcb_mopen_req::Swap(mcb_mopen_req* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(flags_, other->flags_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mopen_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mopen_req_descriptor_;
  metadata.reflection = mcb_mopen_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mopen_rep::kMidFieldNumber;
const int mcb_mopen_rep::kTypeFieldNumber;
const int mcb_mopen_rep::kSizeFieldNumber;
const int mcb_mopen_rep::kAlreadyOpenedFieldNumber;
#endif  // !_MSC_VER

mcb_mopen_rep::mcb_mopen_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mopen_rep::InitAsDefaultInstance() {
}

mcb_mopen_rep::mcb_mopen_rep(const mcb_mopen_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mopen_rep::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 0u;
  type_ = 0u;
  size_ = 0u;
  already_opened_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mopen_rep::~mcb_mopen_rep() {
  SharedDtor();
}

void mcb_mopen_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_mopen_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mopen_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mopen_rep_descriptor_;
}

const mcb_mopen_rep& mcb_mopen_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mopen_rep* mcb_mopen_rep::default_instance_ = NULL;

mcb_mopen_rep* mcb_mopen_rep::New() const {
  return new mcb_mopen_rep;
}

void mcb_mopen_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 0u;
    type_ = 0u;
    size_ = 0u;
    already_opened_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mopen_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional uint32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_already_opened;
        break;
      }

      // optional bool already_opened = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &already_opened_)));
          set_has_already_opened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mopen_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // optional bool already_opened = 4;
  if (has_already_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->already_opened(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mopen_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  // optional bool already_opened = 4;
  if (has_already_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->already_opened(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mopen_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bool already_opened = 4;
    if (has_already_opened()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mopen_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mopen_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mopen_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mopen_rep::MergeFrom(const mcb_mopen_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_already_opened()) {
      set_already_opened(from.already_opened());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mopen_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mopen_rep::CopyFrom(const mcb_mopen_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mopen_rep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mcb_mopen_rep::Swap(mcb_mopen_rep* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(already_opened_, other->already_opened_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mopen_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mopen_rep_descriptor_;
  metadata.reflection = mcb_mopen_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mlink::kLinkFieldNumber;
const int mcb_mlink::kOrigFieldNumber;
const int mcb_mlink::kSoftFieldNumber;
#endif  // !_MSC_VER

mcb_mlink::mcb_mlink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mlink::InitAsDefaultInstance() {
}

mcb_mlink::mcb_mlink(const mcb_mlink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mlink::SharedCtor() {
  _cached_size_ = 0;
  link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soft_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mlink::~mcb_mlink() {
  SharedDtor();
}

void mcb_mlink::SharedDtor() {
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    delete link_;
  }
  if (orig_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mlink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mlink_descriptor_;
}

const mcb_mlink& mcb_mlink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mlink* mcb_mlink::default_instance_ = NULL;

mcb_mlink* mcb_mlink::New() const {
  return new mcb_mlink;
}

void mcb_mlink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_link()) {
      if (link_ != &::google::protobuf::internal::kEmptyString) {
        link_->clear();
      }
    }
    if (has_orig()) {
      if (orig_ != &::google::protobuf::internal::kEmptyString) {
        orig_->clear();
      }
    }
    soft_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string link = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link().data(), this->link().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orig;
        break;
      }

      // required string orig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orig().data(), this->orig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_soft;
        break;
      }

      // required bool soft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &soft_)));
          set_has_soft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string link = 1;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->link(), output);
  }

  // required string orig = 2;
  if (has_orig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orig().data(), this->orig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orig(), output);
  }

  // required bool soft = 3;
  if (has_soft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->soft(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mlink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string link = 1;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link(), target);
  }

  // required string orig = 2;
  if (has_orig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orig().data(), this->orig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orig(), target);
  }

  // required bool soft = 3;
  if (has_soft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->soft(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mlink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string link = 1;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // required string orig = 2;
    if (has_orig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig());
    }

    // required bool soft = 3;
    if (has_soft()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mlink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mlink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mlink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mlink::MergeFrom(const mcb_mlink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_orig()) {
      set_orig(from.orig());
    }
    if (from.has_soft()) {
      set_soft(from.soft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mlink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mlink::CopyFrom(const mcb_mlink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mlink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mcb_mlink::Swap(mcb_mlink* other) {
  if (other != this) {
    std::swap(link_, other->link_);
    std::swap(orig_, other->orig_);
    std::swap(soft_, other->soft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mlink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mlink_descriptor_;
  metadata.reflection = mcb_mlink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_munlink::kNameFieldNumber;
#endif  // !_MSC_VER

mcb_munlink::mcb_munlink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_munlink::InitAsDefaultInstance() {
}

mcb_munlink::mcb_munlink(const mcb_munlink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_munlink::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_munlink::~mcb_munlink() {
  SharedDtor();
}

void mcb_munlink::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void mcb_munlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_munlink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_munlink_descriptor_;
}

const mcb_munlink& mcb_munlink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_munlink* mcb_munlink::default_instance_ = NULL;

mcb_munlink* mcb_munlink::New() const {
  return new mcb_munlink;
}

void mcb_munlink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_munlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_munlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_munlink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_munlink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_munlink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_munlink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_munlink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_munlink::MergeFrom(const mcb_munlink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_munlink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_munlink::CopyFrom(const mcb_munlink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_munlink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mcb_munlink::Swap(mcb_munlink* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_munlink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_munlink_descriptor_;
  metadata.reflection = mcb_munlink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mmove::kFromFieldNumber;
const int mcb_mmove::kToFieldNumber;
#endif  // !_MSC_VER

mcb_mmove::mcb_mmove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mmove::InitAsDefaultInstance() {
}

mcb_mmove::mcb_mmove(const mcb_mmove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mmove::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mmove::~mcb_mmove() {
  SharedDtor();
}

void mcb_mmove::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mmove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mmove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mmove_descriptor_;
}

const mcb_mmove& mcb_mmove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mmove* mcb_mmove::default_instance_ = NULL;

mcb_mmove* mcb_mmove::New() const {
  return new mcb_mmove;
}

void mcb_mmove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mmove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // required string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mmove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // required string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mmove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // required string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mmove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mmove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mmove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mmove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mmove::MergeFrom(const mcb_mmove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mmove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mmove::CopyFrom(const mcb_mmove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mmove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mcb_mmove::Swap(mcb_mmove* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mmove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mmove_descriptor_;
  metadata.reflection = mcb_mmove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mlist_req::kMaskFieldNumber;
const int mcb_mlist_req::kFlagsFieldNumber;
const int mcb_mlist_req::kProfileFieldNumber;
#endif  // !_MSC_VER

mcb_mlist_req::mcb_mlist_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mlist_req::InitAsDefaultInstance() {
}

mcb_mlist_req::mcb_mlist_req(const mcb_mlist_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mlist_req::SharedCtor() {
  _cached_size_ = 0;
  mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mlist_req::~mcb_mlist_req() {
  SharedDtor();
}

void mcb_mlist_req::SharedDtor() {
  if (mask_ != &::google::protobuf::internal::kEmptyString) {
    delete mask_;
  }
  if (profile_ != &::google::protobuf::internal::kEmptyString) {
    delete profile_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mlist_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mlist_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mlist_req_descriptor_;
}

const mcb_mlist_req& mcb_mlist_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mlist_req* mcb_mlist_req::default_instance_ = NULL;

mcb_mlist_req* mcb_mlist_req::New() const {
  return new mcb_mlist_req;
}

void mcb_mlist_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mask()) {
      if (mask_ != &::google::protobuf::internal::kEmptyString) {
        mask_->clear();
      }
    }
    flags_ = 0u;
    if (has_profile()) {
      if (profile_ != &::google::protobuf::internal::kEmptyString) {
        profile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mlist_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mask().data(), this->mask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_profile;
        break;
      }

      // optional string profile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profile().data(), this->profile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mlist_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mask = 1;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask().data(), this->mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mask(), output);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional string profile = 3;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->profile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mlist_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mask = 1;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask().data(), this->mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mask(), target);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional string profile = 3;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->profile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mlist_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mask = 1;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mask());
    }

    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string profile = 3;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mlist_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mlist_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mlist_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mlist_req::MergeFrom(const mcb_mlist_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_profile()) {
      set_profile(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mlist_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mlist_req::CopyFrom(const mcb_mlist_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mlist_req::IsInitialized() const {

  return true;
}

void mcb_mlist_req::Swap(mcb_mlist_req* other) {
  if (other != this) {
    std::swap(mask_, other->mask_);
    std::swap(flags_, other->flags_);
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mlist_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mlist_req_descriptor_;
  metadata.reflection = mcb_mlist_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mlist_rep::kNamesFieldNumber;
#endif  // !_MSC_VER

mcb_mlist_rep::mcb_mlist_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mlist_rep::InitAsDefaultInstance() {
}

mcb_mlist_rep::mcb_mlist_rep(const mcb_mlist_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mlist_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mlist_rep::~mcb_mlist_rep() {
  SharedDtor();
}

void mcb_mlist_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_mlist_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mlist_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mlist_rep_descriptor_;
}

const mcb_mlist_rep& mcb_mlist_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mlist_rep* mcb_mlist_rep::default_instance_ = NULL;

mcb_mlist_rep* mcb_mlist_rep::New() const {
  return new mcb_mlist_rep;
}

void mcb_mlist_rep::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mlist_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mlist_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mlist_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mlist_rep::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mlist_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mlist_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mlist_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mlist_rep::MergeFrom(const mcb_mlist_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mlist_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mlist_rep::CopyFrom(const mcb_mlist_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mlist_rep::IsInitialized() const {

  return true;
}

void mcb_mlist_rep::Swap(mcb_mlist_rep* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mlist_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mlist_rep_descriptor_;
  metadata.reflection = mcb_mlist_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mstat::kStMidFieldNumber;
const int mcb_mstat::kStTypeFieldNumber;
const int mcb_mstat::kStNlinkFieldNumber;
const int mcb_mstat::kStUidFieldNumber;
const int mcb_mstat::kStGidFieldNumber;
const int mcb_mstat::kStSizeFieldNumber;
const int mcb_mstat::kStAtimeFieldNumber;
const int mcb_mstat::kStMtimeFieldNumber;
const int mcb_mstat::kStCtimeFieldNumber;
#endif  // !_MSC_VER

mcb_mstat::mcb_mstat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mstat::InitAsDefaultInstance() {
}

mcb_mstat::mcb_mstat(const mcb_mstat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mstat::SharedCtor() {
  _cached_size_ = 0;
  st_mid_ = 0u;
  st_type_ = 0u;
  st_nlink_ = 0u;
  st_uid_ = 0u;
  st_gid_ = 0u;
  st_size_ = 0u;
  st_atime_ = 0u;
  st_mtime_ = 0u;
  st_ctime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mstat::~mcb_mstat() {
  SharedDtor();
}

void mcb_mstat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_mstat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mstat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mstat_descriptor_;
}

const mcb_mstat& mcb_mstat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mstat* mcb_mstat::default_instance_ = NULL;

mcb_mstat* mcb_mstat::New() const {
  return new mcb_mstat;
}

void mcb_mstat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    st_mid_ = 0u;
    st_type_ = 0u;
    st_nlink_ = 0u;
    st_uid_ = 0u;
    st_gid_ = 0u;
    st_size_ = 0u;
    st_atime_ = 0u;
    st_mtime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    st_ctime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mstat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 st_mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_mid_)));
          set_has_st_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_st_type;
        break;
      }

      // required uint32 st_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_type_)));
          set_has_st_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_st_nlink;
        break;
      }

      // required uint32 st_nlink = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_nlink_)));
          set_has_st_nlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_st_uid;
        break;
      }

      // required uint32 st_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_uid_)));
          set_has_st_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_st_gid;
        break;
      }

      // required uint32 st_gid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_gid_)));
          set_has_st_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_st_size;
        break;
      }

      // required uint32 st_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_size_)));
          set_has_st_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_st_atime;
        break;
      }

      // required uint32 st_atime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_atime_)));
          set_has_st_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_st_mtime;
        break;
      }

      // required uint32 st_mtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &st_mtime_)));
          set_has_st_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_st_ctime;
        break;
      }

      // required uint64 st_ctime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_ctime_)));
          set_has_st_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mstat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 st_mid = 1;
  if (has_st_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->st_mid(), output);
  }

  // required uint32 st_type = 2;
  if (has_st_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->st_type(), output);
  }

  // required uint32 st_nlink = 3;
  if (has_st_nlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->st_nlink(), output);
  }

  // required uint32 st_uid = 4;
  if (has_st_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->st_uid(), output);
  }

  // required uint32 st_gid = 5;
  if (has_st_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->st_gid(), output);
  }

  // required uint32 st_size = 6;
  if (has_st_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->st_size(), output);
  }

  // required uint32 st_atime = 7;
  if (has_st_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->st_atime(), output);
  }

  // required uint32 st_mtime = 8;
  if (has_st_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->st_mtime(), output);
  }

  // required uint64 st_ctime = 9;
  if (has_st_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->st_ctime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mstat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 st_mid = 1;
  if (has_st_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->st_mid(), target);
  }

  // required uint32 st_type = 2;
  if (has_st_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->st_type(), target);
  }

  // required uint32 st_nlink = 3;
  if (has_st_nlink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->st_nlink(), target);
  }

  // required uint32 st_uid = 4;
  if (has_st_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->st_uid(), target);
  }

  // required uint32 st_gid = 5;
  if (has_st_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->st_gid(), target);
  }

  // required uint32 st_size = 6;
  if (has_st_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->st_size(), target);
  }

  // required uint32 st_atime = 7;
  if (has_st_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->st_atime(), target);
  }

  // required uint32 st_mtime = 8;
  if (has_st_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->st_mtime(), target);
  }

  // required uint64 st_ctime = 9;
  if (has_st_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->st_ctime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mstat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 st_mid = 1;
    if (has_st_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_mid());
    }

    // required uint32 st_type = 2;
    if (has_st_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_type());
    }

    // required uint32 st_nlink = 3;
    if (has_st_nlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_nlink());
    }

    // required uint32 st_uid = 4;
    if (has_st_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_uid());
    }

    // required uint32 st_gid = 5;
    if (has_st_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_gid());
    }

    // required uint32 st_size = 6;
    if (has_st_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_size());
    }

    // required uint32 st_atime = 7;
    if (has_st_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_atime());
    }

    // required uint32 st_mtime = 8;
    if (has_st_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->st_mtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 st_ctime = 9;
    if (has_st_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->st_ctime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mstat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mstat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mstat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mstat::MergeFrom(const mcb_mstat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st_mid()) {
      set_st_mid(from.st_mid());
    }
    if (from.has_st_type()) {
      set_st_type(from.st_type());
    }
    if (from.has_st_nlink()) {
      set_st_nlink(from.st_nlink());
    }
    if (from.has_st_uid()) {
      set_st_uid(from.st_uid());
    }
    if (from.has_st_gid()) {
      set_st_gid(from.st_gid());
    }
    if (from.has_st_size()) {
      set_st_size(from.st_size());
    }
    if (from.has_st_atime()) {
      set_st_atime(from.st_atime());
    }
    if (from.has_st_mtime()) {
      set_st_mtime(from.st_mtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_st_ctime()) {
      set_st_ctime(from.st_ctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mstat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mstat::CopyFrom(const mcb_mstat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mstat::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mcb_mstat::Swap(mcb_mstat* other) {
  if (other != this) {
    std::swap(st_mid_, other->st_mid_);
    std::swap(st_type_, other->st_type_);
    std::swap(st_nlink_, other->st_nlink_);
    std::swap(st_uid_, other->st_uid_);
    std::swap(st_gid_, other->st_gid_);
    std::swap(st_size_, other->st_size_);
    std::swap(st_atime_, other->st_atime_);
    std::swap(st_mtime_, other->st_mtime_);
    std::swap(st_ctime_, other->st_ctime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mstat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mstat_descriptor_;
  metadata.reflection = mcb_mstat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mattr_read::kMidFieldNumber;
const int mcb_mattr_read::kKeyFieldNumber;
const int mcb_mattr_read::kLenFieldNumber;
#endif  // !_MSC_VER

mcb_mattr_read::mcb_mattr_read()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mattr_read::InitAsDefaultInstance() {
}

mcb_mattr_read::mcb_mattr_read(const mcb_mattr_read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mattr_read::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mattr_read::~mcb_mattr_read() {
  SharedDtor();
}

void mcb_mattr_read::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mattr_read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mattr_read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mattr_read_descriptor_;
}

const mcb_mattr_read& mcb_mattr_read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mattr_read* mcb_mattr_read::default_instance_ = NULL;

mcb_mattr_read* mcb_mattr_read::New() const {
  return new mcb_mattr_read;
}

void mcb_mattr_read::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mattr_read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // required uint32 len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mattr_read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // required uint32 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mattr_read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mid(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required uint32 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mattr_read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mid());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required uint32 len = 3;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mattr_read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mattr_read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mattr_read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mattr_read::MergeFrom(const mcb_mattr_read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mattr_read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mattr_read::CopyFrom(const mcb_mattr_read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mattr_read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mcb_mattr_read::Swap(mcb_mattr_read* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(key_, other->key_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mattr_read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mattr_read_descriptor_;
  metadata.reflection = mcb_mattr_read_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mattr_write::kMidFieldNumber;
const int mcb_mattr_write::kKeyFieldNumber;
const int mcb_mattr_write::kValueFieldNumber;
#endif  // !_MSC_VER

mcb_mattr_write::mcb_mattr_write()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mattr_write::InitAsDefaultInstance() {
}

mcb_mattr_write::mcb_mattr_write(const mcb_mattr_write& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mattr_write::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mattr_write::~mcb_mattr_write() {
  SharedDtor();
}

void mcb_mattr_write::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mattr_write::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mattr_write::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mattr_write_descriptor_;
}

const mcb_mattr_write& mcb_mattr_write::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mattr_write* mcb_mattr_write::default_instance_ = NULL;

mcb_mattr_write* mcb_mattr_write::New() const {
  return new mcb_mattr_write;
}

void mcb_mattr_write::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mattr_write::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mattr_write::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mattr_write::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mid(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mattr_write::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mid());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mattr_write::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mattr_write* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mattr_write*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mattr_write::MergeFrom(const mcb_mattr_write& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mattr_write::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mattr_write::CopyFrom(const mcb_mattr_write& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mattr_write::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mcb_mattr_write::Swap(mcb_mattr_write* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mattr_write::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mattr_write_descriptor_;
  metadata.reflection = mcb_mattr_write_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mattrs_read::kMidFieldNumber;
const int mcb_mattrs_read::kLenFieldNumber;
#endif  // !_MSC_VER

mcb_mattrs_read::mcb_mattrs_read()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mattrs_read::InitAsDefaultInstance() {
}

mcb_mattrs_read::mcb_mattrs_read(const mcb_mattrs_read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mattrs_read::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 0u;
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mattrs_read::~mcb_mattrs_read() {
  SharedDtor();
}

void mcb_mattrs_read::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_mattrs_read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mattrs_read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mattrs_read_descriptor_;
}

const mcb_mattrs_read& mcb_mattrs_read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mattrs_read* mcb_mattrs_read::default_instance_ = NULL;

mcb_mattrs_read* mcb_mattrs_read::New() const {
  return new mcb_mattrs_read;
}

void mcb_mattrs_read::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 0u;
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mattrs_read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // required uint32 len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mattrs_read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // required uint32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mattrs_read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mid(), target);
  }

  // required uint32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mattrs_read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mid());
    }

    // required uint32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mattrs_read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mattrs_read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mattrs_read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mattrs_read::MergeFrom(const mcb_mattrs_read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mattrs_read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mattrs_read::CopyFrom(const mcb_mattrs_read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mattrs_read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mcb_mattrs_read::Swap(mcb_mattrs_read* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mattrs_read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mattrs_read_descriptor_;
  metadata.reflection = mcb_mattrs_read_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_msave::kLenFieldNumber;
const int mcb_msave::kSepFieldNumber;
#endif  // !_MSC_VER

mcb_msave::mcb_msave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_msave::InitAsDefaultInstance() {
}

mcb_msave::mcb_msave(const mcb_msave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_msave::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0u;
  sep_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_msave::~mcb_msave() {
  SharedDtor();
}

void mcb_msave::SharedDtor() {
  if (sep_ != &::google::protobuf::internal::kEmptyString) {
    delete sep_;
  }
  if (this != default_instance_) {
  }
}

void mcb_msave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_msave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_msave_descriptor_;
}

const mcb_msave& mcb_msave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_msave* mcb_msave::default_instance_ = NULL;

mcb_msave* mcb_msave::New() const {
  return new mcb_msave;
}

void mcb_msave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    len_ = 0u;
    if (has_sep()) {
      if (sep_ != &::google::protobuf::internal::kEmptyString) {
        sep_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_msave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sep;
        break;
      }

      // required string sep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sep()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sep().data(), this->sep().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_msave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->len(), output);
  }

  // required string sep = 2;
  if (has_sep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sep().data(), this->sep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_msave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->len(), target);
  }

  // required string sep = 2;
  if (has_sep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sep().data(), this->sep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_msave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // required string sep = 2;
    if (has_sep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_msave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_msave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_msave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_msave::MergeFrom(const mcb_msave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_sep()) {
      set_sep(from.sep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_msave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_msave::CopyFrom(const mcb_msave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_msave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mcb_msave::Swap(mcb_msave* other) {
  if (other != this) {
    std::swap(len_, other->len_);
    std::swap(sep_, other->sep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_msave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_msave_descriptor_;
  metadata.reflection = mcb_msave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_mload::kTextFieldNumber;
const int mcb_mload::kSepFieldNumber;
#endif  // !_MSC_VER

mcb_mload::mcb_mload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_mload::InitAsDefaultInstance() {
}

mcb_mload::mcb_mload(const mcb_mload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_mload::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sep_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_mload::~mcb_mload() {
  SharedDtor();
}

void mcb_mload::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (sep_ != &::google::protobuf::internal::kEmptyString) {
    delete sep_;
  }
  if (this != default_instance_) {
  }
}

void mcb_mload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_mload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_mload_descriptor_;
}

const mcb_mload& mcb_mload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_mload* mcb_mload::default_instance_ = NULL;

mcb_mload* mcb_mload::New() const {
  return new mcb_mload;
}

void mcb_mload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_sep()) {
      if (sep_ != &::google::protobuf::internal::kEmptyString) {
        sep_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_mload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sep;
        break;
      }

      // required string sep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sep()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sep().data(), this->sep().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_mload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // required string sep = 2;
  if (has_sep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sep().data(), this->sep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_mload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required string sep = 2;
  if (has_sep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sep().data(), this->sep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_mload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // required string sep = 2;
    if (has_sep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_mload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_mload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_mload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_mload::MergeFrom(const mcb_mload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_sep()) {
      set_sep(from.sep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_mload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_mload::CopyFrom(const mcb_mload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_mload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mcb_mload::Swap(mcb_mload* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(sep_, other->sep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_mload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_mload_descriptor_;
  metadata.reflection = mcb_mload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_sysinfo_request::kFlagsFieldNumber;
const int mcb_sysinfo_request::kCidsFieldNumber;
const int mcb_sysinfo_request::kMidsFieldNumber;
#endif  // !_MSC_VER

mcb_sysinfo_request::mcb_sysinfo_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_sysinfo_request::InitAsDefaultInstance() {
}

mcb_sysinfo_request::mcb_sysinfo_request(const mcb_sysinfo_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_sysinfo_request::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_sysinfo_request::~mcb_sysinfo_request() {
  SharedDtor();
}

void mcb_sysinfo_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_sysinfo_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_sysinfo_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_sysinfo_request_descriptor_;
}

const mcb_sysinfo_request& mcb_sysinfo_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_sysinfo_request* mcb_sysinfo_request::default_instance_ = NULL;

mcb_sysinfo_request* mcb_sysinfo_request::New() const {
  return new mcb_sysinfo_request;
}

void mcb_sysinfo_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flags_ = 0;
  }
  cids_.Clear();
  mids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_sysinfo_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        break;
      }

      // repeated int32 cids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        if (input->ExpectTag(24)) goto parse_mids;
        break;
      }

      // repeated int32 mids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_sysinfo_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }

  // repeated int32 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cids(i), output);
  }

  // repeated int32 mids = 3;
  for (int i = 0; i < this->mids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_sysinfo_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flags(), target);
  }

  // repeated int32 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cids(i), target);
  }

  // repeated int32 mids = 3;
  for (int i = 0; i < this->mids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_sysinfo_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  // repeated int32 cids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  // repeated int32 mids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mids(i));
    }
    total_size += 1 * this->mids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_sysinfo_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_sysinfo_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_sysinfo_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_sysinfo_request::MergeFrom(const mcb_sysinfo_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  mids_.MergeFrom(from.mids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_sysinfo_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_sysinfo_request::CopyFrom(const mcb_sysinfo_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_sysinfo_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mcb_sysinfo_request::Swap(mcb_sysinfo_request* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    cids_.Swap(&other->cids_);
    mids_.Swap(&other->mids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_sysinfo_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_sysinfo_request_descriptor_;
  metadata.reflection = mcb_sysinfo_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_sysinfo_common::kStartTimeFieldNumber;
const int mcb_sysinfo_common::kAvailMcbsFieldNumber;
const int mcb_sysinfo_common::kAllocatedMcbsFieldNumber;
const int mcb_sysinfo_common::kPreallocMcbsFieldNumber;
const int mcb_sysinfo_common::kMaxAllocMcbsFieldNumber;
#endif  // !_MSC_VER

mcb_sysinfo_common::mcb_sysinfo_common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_sysinfo_common::InitAsDefaultInstance() {
}

mcb_sysinfo_common::mcb_sysinfo_common(const mcb_sysinfo_common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_sysinfo_common::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0;
  avail_mcbs_ = 0;
  allocated_mcbs_ = 0;
  prealloc_mcbs_ = 0;
  max_alloc_mcbs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_sysinfo_common::~mcb_sysinfo_common() {
  SharedDtor();
}

void mcb_sysinfo_common::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mcb_sysinfo_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_sysinfo_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_sysinfo_common_descriptor_;
}

const mcb_sysinfo_common& mcb_sysinfo_common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_sysinfo_common* mcb_sysinfo_common::default_instance_ = NULL;

mcb_sysinfo_common* mcb_sysinfo_common::New() const {
  return new mcb_sysinfo_common;
}

void mcb_sysinfo_common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = 0;
    avail_mcbs_ = 0;
    allocated_mcbs_ = 0;
    prealloc_mcbs_ = 0;
    max_alloc_mcbs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_sysinfo_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avail_mcbs;
        break;
      }

      // optional int32 avail_mcbs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avail_mcbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avail_mcbs_)));
          set_has_avail_mcbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allocated_mcbs;
        break;
      }

      // optional int32 allocated_mcbs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allocated_mcbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allocated_mcbs_)));
          set_has_allocated_mcbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prealloc_mcbs;
        break;
      }

      // optional int32 prealloc_mcbs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prealloc_mcbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prealloc_mcbs_)));
          set_has_prealloc_mcbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_alloc_mcbs;
        break;
      }

      // optional int32 max_alloc_mcbs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_alloc_mcbs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alloc_mcbs_)));
          set_has_max_alloc_mcbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_sysinfo_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_time(), output);
  }

  // optional int32 avail_mcbs = 2;
  if (has_avail_mcbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avail_mcbs(), output);
  }

  // optional int32 allocated_mcbs = 3;
  if (has_allocated_mcbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allocated_mcbs(), output);
  }

  // optional int32 prealloc_mcbs = 4;
  if (has_prealloc_mcbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prealloc_mcbs(), output);
  }

  // optional int32 max_alloc_mcbs = 8;
  if (has_max_alloc_mcbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_alloc_mcbs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_sysinfo_common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_time(), target);
  }

  // optional int32 avail_mcbs = 2;
  if (has_avail_mcbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avail_mcbs(), target);
  }

  // optional int32 allocated_mcbs = 3;
  if (has_allocated_mcbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allocated_mcbs(), target);
  }

  // optional int32 prealloc_mcbs = 4;
  if (has_prealloc_mcbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prealloc_mcbs(), target);
  }

  // optional int32 max_alloc_mcbs = 8;
  if (has_max_alloc_mcbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_alloc_mcbs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_sysinfo_common::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 avail_mcbs = 2;
    if (has_avail_mcbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avail_mcbs());
    }

    // optional int32 allocated_mcbs = 3;
    if (has_allocated_mcbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allocated_mcbs());
    }

    // optional int32 prealloc_mcbs = 4;
    if (has_prealloc_mcbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prealloc_mcbs());
    }

    // optional int32 max_alloc_mcbs = 8;
    if (has_max_alloc_mcbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_alloc_mcbs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_sysinfo_common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_sysinfo_common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_sysinfo_common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_sysinfo_common::MergeFrom(const mcb_sysinfo_common& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_avail_mcbs()) {
      set_avail_mcbs(from.avail_mcbs());
    }
    if (from.has_allocated_mcbs()) {
      set_allocated_mcbs(from.allocated_mcbs());
    }
    if (from.has_prealloc_mcbs()) {
      set_prealloc_mcbs(from.prealloc_mcbs());
    }
    if (from.has_max_alloc_mcbs()) {
      set_max_alloc_mcbs(from.max_alloc_mcbs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_sysinfo_common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_sysinfo_common::CopyFrom(const mcb_sysinfo_common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_sysinfo_common::IsInitialized() const {

  return true;
}

void mcb_sysinfo_common::Swap(mcb_sysinfo_common* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(avail_mcbs_, other->avail_mcbs_);
    std::swap(allocated_mcbs_, other->allocated_mcbs_);
    std::swap(prealloc_mcbs_, other->prealloc_mcbs_);
    std::swap(max_alloc_mcbs_, other->max_alloc_mcbs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_sysinfo_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_sysinfo_common_descriptor_;
  metadata.reflection = mcb_sysinfo_common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_sysinfo_client::kCidFieldNumber;
const int mcb_sysinfo_client::kNameFieldNumber;
const int mcb_sysinfo_client::kUuidFieldNumber;
const int mcb_sysinfo_client::kAddressFieldNumber;
const int mcb_sysinfo_client::kDefaultProfileFieldNumber;
const int mcb_sysinfo_client::kProfilesFieldNumber;
const int mcb_sysinfo_client::kGroupsFieldNumber;
const int mcb_sysinfo_client::kStartTimeFieldNumber;
const int mcb_sysinfo_client::kClockSyncPeriodFieldNumber;
const int mcb_sysinfo_client::kConnectionLatencyFieldNumber;
const int mcb_sysinfo_client::kOutputQueueLimitFieldNumber;
const int mcb_sysinfo_client::kOutputQueueSizeFieldNumber;
#endif  // !_MSC_VER

mcb_sysinfo_client::mcb_sysinfo_client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_sysinfo_client::InitAsDefaultInstance() {
}

mcb_sysinfo_client::mcb_sysinfo_client(const mcb_sysinfo_client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_sysinfo_client::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = 0;
  clock_sync_period_ = 0;
  connection_latency_ = 0;
  output_queue_limit_ = 0;
  output_queue_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_sysinfo_client::~mcb_sysinfo_client() {
  SharedDtor();
}

void mcb_sysinfo_client::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (default_profile_ != &::google::protobuf::internal::kEmptyString) {
    delete default_profile_;
  }
  if (this != default_instance_) {
  }
}

void mcb_sysinfo_client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_sysinfo_client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_sysinfo_client_descriptor_;
}

const mcb_sysinfo_client& mcb_sysinfo_client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_sysinfo_client* mcb_sysinfo_client::default_instance_ = NULL;

mcb_sysinfo_client* mcb_sysinfo_client::New() const {
  return new mcb_sysinfo_client;
}

void mcb_sysinfo_client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_default_profile()) {
      if (default_profile_ != &::google::protobuf::internal::kEmptyString) {
        default_profile_->clear();
      }
    }
    start_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clock_sync_period_ = 0;
    connection_latency_ = 0;
    output_queue_limit_ = 0;
    output_queue_size_ = 0;
  }
  profiles_.Clear();
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_sysinfo_client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_default_profile;
        break;
      }

      // optional string default_profile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_profile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_profile().data(), this->default_profile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_profiles;
        break;
      }

      // repeated string profiles = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_profiles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profiles(this->profiles_size() - 1).data(),
            this->profiles(this->profiles_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_profiles;
        if (input->ExpectTag(58)) goto parse_groups;
        break;
      }

      // repeated string groups = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groups()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groups(this->groups_size() - 1).data(),
            this->groups(this->groups_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_groups;
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }

      // optional int32 start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clock_sync_period;
        break;
      }

      // optional int32 clock_sync_period = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clock_sync_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clock_sync_period_)));
          set_has_clock_sync_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_connection_latency;
        break;
      }

      // optional int32 connection_latency = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_latency_)));
          set_has_connection_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_output_queue_limit;
        break;
      }

      // optional int32 output_queue_limit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_queue_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_queue_limit_)));
          set_has_output_queue_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_output_queue_size;
        break;
      }

      // optional int32 output_queue_size = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_queue_size_)));
          set_has_output_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_sysinfo_client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bytes uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->uuid(), output);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address(), output);
  }

  // optional string default_profile = 5;
  if (has_default_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_profile().data(), this->default_profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->default_profile(), output);
  }

  // repeated string profiles = 6;
  for (int i = 0; i < this->profiles_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->profiles(i).data(), this->profiles(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->profiles(i), output);
  }

  // repeated string groups = 7;
  for (int i = 0; i < this->groups_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->groups(i).data(), this->groups(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->groups(i), output);
  }

  // optional int32 start_time = 8;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->start_time(), output);
  }

  // optional int32 clock_sync_period = 9;
  if (has_clock_sync_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->clock_sync_period(), output);
  }

  // optional int32 connection_latency = 10;
  if (has_connection_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->connection_latency(), output);
  }

  // optional int32 output_queue_limit = 11;
  if (has_output_queue_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->output_queue_limit(), output);
  }

  // optional int32 output_queue_size = 12;
  if (has_output_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->output_queue_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_sysinfo_client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bytes uuid = 3;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->uuid(), target);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // optional string default_profile = 5;
  if (has_default_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_profile().data(), this->default_profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_profile(), target);
  }

  // repeated string profiles = 6;
  for (int i = 0; i < this->profiles_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profiles(i).data(), this->profiles(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->profiles(i), target);
  }

  // repeated string groups = 7;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groups(i).data(), this->groups(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->groups(i), target);
  }

  // optional int32 start_time = 8;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->start_time(), target);
  }

  // optional int32 clock_sync_period = 9;
  if (has_clock_sync_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->clock_sync_period(), target);
  }

  // optional int32 connection_latency = 10;
  if (has_connection_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->connection_latency(), target);
  }

  // optional int32 output_queue_limit = 11;
  if (has_output_queue_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->output_queue_limit(), target);
  }

  // optional int32 output_queue_size = 12;
  if (has_output_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->output_queue_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_sysinfo_client::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional string address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string default_profile = 5;
    if (has_default_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_profile());
    }

    // optional int32 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 clock_sync_period = 9;
    if (has_clock_sync_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clock_sync_period());
    }

    // optional int32 connection_latency = 10;
    if (has_connection_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_latency());
    }

    // optional int32 output_queue_limit = 11;
    if (has_output_queue_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_queue_limit());
    }

    // optional int32 output_queue_size = 12;
    if (has_output_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_queue_size());
    }

  }
  // repeated string profiles = 6;
  total_size += 1 * this->profiles_size();
  for (int i = 0; i < this->profiles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->profiles(i));
  }

  // repeated string groups = 7;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_sysinfo_client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_sysinfo_client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_sysinfo_client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_sysinfo_client::MergeFrom(const mcb_sysinfo_client& from) {
  GOOGLE_CHECK_NE(&from, this);
  profiles_.MergeFrom(from.profiles_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_default_profile()) {
      set_default_profile(from.default_profile());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clock_sync_period()) {
      set_clock_sync_period(from.clock_sync_period());
    }
    if (from.has_connection_latency()) {
      set_connection_latency(from.connection_latency());
    }
    if (from.has_output_queue_limit()) {
      set_output_queue_limit(from.output_queue_limit());
    }
    if (from.has_output_queue_size()) {
      set_output_queue_size(from.output_queue_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_sysinfo_client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_sysinfo_client::CopyFrom(const mcb_sysinfo_client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_sysinfo_client::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mcb_sysinfo_client::Swap(mcb_sysinfo_client* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(uuid_, other->uuid_);
    std::swap(address_, other->address_);
    std::swap(default_profile_, other->default_profile_);
    profiles_.Swap(&other->profiles_);
    groups_.Swap(&other->groups_);
    std::swap(start_time_, other->start_time_);
    std::swap(clock_sync_period_, other->clock_sync_period_);
    std::swap(connection_latency_, other->connection_latency_);
    std::swap(output_queue_limit_, other->output_queue_limit_);
    std::swap(output_queue_size_, other->output_queue_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_sysinfo_client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_sysinfo_client_descriptor_;
  metadata.reflection = mcb_sysinfo_client_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_sysinfo_message::kMidFieldNumber;
const int mcb_sysinfo_message::kCidFieldNumber;
const int mcb_sysinfo_message::kNameFieldNumber;
const int mcb_sysinfo_message::kPathFieldNumber;
const int mcb_sysinfo_message::kOflagsFieldNumber;
const int mcb_sysinfo_message::kSflagsFieldNumber;
const int mcb_sysinfo_message::kOpenNrFieldNumber;
const int mcb_sysinfo_message::kSubsNrFieldNumber;
const int mcb_sysinfo_message::kSndNrFieldNumber;
const int mcb_sysinfo_message::kRcvNrFieldNumber;
const int mcb_sysinfo_message::kAvgSndFieldNumber;
const int mcb_sysinfo_message::kAvgRcvFieldNumber;
#endif  // !_MSC_VER

mcb_sysinfo_message::mcb_sysinfo_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_sysinfo_message::InitAsDefaultInstance() {
}

mcb_sysinfo_message::mcb_sysinfo_message(const mcb_sysinfo_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_sysinfo_message::SharedCtor() {
  _cached_size_ = 0;
  mid_ = 0;
  cid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oflags_ = 0;
  sflags_ = 0;
  open_nr_ = 0;
  subs_nr_ = 0;
  snd_nr_ = 0;
  rcv_nr_ = 0;
  avg_snd_ = 0;
  avg_rcv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_sysinfo_message::~mcb_sysinfo_message() {
  SharedDtor();
}

void mcb_sysinfo_message::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void mcb_sysinfo_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_sysinfo_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_sysinfo_message_descriptor_;
}

const mcb_sysinfo_message& mcb_sysinfo_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_sysinfo_message* mcb_sysinfo_message::default_instance_ = NULL;

mcb_sysinfo_message* mcb_sysinfo_message::New() const {
  return new mcb_sysinfo_message;
}

void mcb_sysinfo_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mid_ = 0;
    cid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    oflags_ = 0;
    sflags_ = 0;
    open_nr_ = 0;
    subs_nr_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    snd_nr_ = 0;
    rcv_nr_ = 0;
    avg_snd_ = 0;
    avg_rcv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_sysinfo_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int32 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }

      // optional string path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_oflags;
        break;
      }

      // optional int32 oflags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oflags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oflags_)));
          set_has_oflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sflags;
        break;
      }

      // optional int32 sflags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sflags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sflags_)));
          set_has_sflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_open_nr;
        break;
      }

      // optional int32 open_nr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_nr_)));
          set_has_open_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_subs_nr;
        break;
      }

      // optional int32 subs_nr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subs_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subs_nr_)));
          set_has_subs_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_snd_nr;
        break;
      }

      // optional int32 snd_nr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snd_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snd_nr_)));
          set_has_snd_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rcv_nr;
        break;
      }

      // optional int32 rcv_nr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcv_nr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rcv_nr_)));
          set_has_rcv_nr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_avg_snd;
        break;
      }

      // optional int32 avg_snd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_snd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_snd_)));
          set_has_avg_snd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_avg_rcv;
        break;
      }

      // optional int32 avg_rcv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_rcv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_rcv_)));
          set_has_avg_rcv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_sysinfo_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // optional int32 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path(), output);
  }

  // optional int32 oflags = 5;
  if (has_oflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oflags(), output);
  }

  // optional int32 sflags = 6;
  if (has_sflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sflags(), output);
  }

  // optional int32 open_nr = 7;
  if (has_open_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->open_nr(), output);
  }

  // optional int32 subs_nr = 8;
  if (has_subs_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->subs_nr(), output);
  }

  // optional int32 snd_nr = 9;
  if (has_snd_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->snd_nr(), output);
  }

  // optional int32 rcv_nr = 10;
  if (has_rcv_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rcv_nr(), output);
  }

  // optional int32 avg_snd = 11;
  if (has_avg_snd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->avg_snd(), output);
  }

  // optional int32 avg_rcv = 12;
  if (has_avg_rcv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->avg_rcv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_sysinfo_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // optional int32 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  // optional int32 oflags = 5;
  if (has_oflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oflags(), target);
  }

  // optional int32 sflags = 6;
  if (has_sflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sflags(), target);
  }

  // optional int32 open_nr = 7;
  if (has_open_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->open_nr(), target);
  }

  // optional int32 subs_nr = 8;
  if (has_subs_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->subs_nr(), target);
  }

  // optional int32 snd_nr = 9;
  if (has_snd_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->snd_nr(), target);
  }

  // optional int32 rcv_nr = 10;
  if (has_rcv_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rcv_nr(), target);
  }

  // optional int32 avg_snd = 11;
  if (has_avg_snd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->avg_snd(), target);
  }

  // optional int32 avg_rcv = 12;
  if (has_avg_rcv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->avg_rcv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_sysinfo_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional int32 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int32 oflags = 5;
    if (has_oflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oflags());
    }

    // optional int32 sflags = 6;
    if (has_sflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sflags());
    }

    // optional int32 open_nr = 7;
    if (has_open_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_nr());
    }

    // optional int32 subs_nr = 8;
    if (has_subs_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subs_nr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 snd_nr = 9;
    if (has_snd_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snd_nr());
    }

    // optional int32 rcv_nr = 10;
    if (has_rcv_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rcv_nr());
    }

    // optional int32 avg_snd = 11;
    if (has_avg_snd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avg_snd());
    }

    // optional int32 avg_rcv = 12;
    if (has_avg_rcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avg_rcv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_sysinfo_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_sysinfo_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_sysinfo_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_sysinfo_message::MergeFrom(const mcb_sysinfo_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_oflags()) {
      set_oflags(from.oflags());
    }
    if (from.has_sflags()) {
      set_sflags(from.sflags());
    }
    if (from.has_open_nr()) {
      set_open_nr(from.open_nr());
    }
    if (from.has_subs_nr()) {
      set_subs_nr(from.subs_nr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snd_nr()) {
      set_snd_nr(from.snd_nr());
    }
    if (from.has_rcv_nr()) {
      set_rcv_nr(from.rcv_nr());
    }
    if (from.has_avg_snd()) {
      set_avg_snd(from.avg_snd());
    }
    if (from.has_avg_rcv()) {
      set_avg_rcv(from.avg_rcv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_sysinfo_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_sysinfo_message::CopyFrom(const mcb_sysinfo_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_sysinfo_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mcb_sysinfo_message::Swap(mcb_sysinfo_message* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(oflags_, other->oflags_);
    std::swap(sflags_, other->sflags_);
    std::swap(open_nr_, other->open_nr_);
    std::swap(subs_nr_, other->subs_nr_);
    std::swap(snd_nr_, other->snd_nr_);
    std::swap(rcv_nr_, other->rcv_nr_);
    std::swap(avg_snd_, other->avg_snd_);
    std::swap(avg_rcv_, other->avg_rcv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_sysinfo_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_sysinfo_message_descriptor_;
  metadata.reflection = mcb_sysinfo_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mcb_sysinfo_reply::kFlagsFieldNumber;
const int mcb_sysinfo_reply::kCommonFieldNumber;
const int mcb_sysinfo_reply::kClientsFieldNumber;
const int mcb_sysinfo_reply::kMessagesFieldNumber;
#endif  // !_MSC_VER

mcb_sysinfo_reply::mcb_sysinfo_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mcb_sysinfo_reply::InitAsDefaultInstance() {
  common_ = const_cast< ::mcb_sysinfo_common*>(&::mcb_sysinfo_common::default_instance());
}

mcb_sysinfo_reply::mcb_sysinfo_reply(const mcb_sysinfo_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mcb_sysinfo_reply::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mcb_sysinfo_reply::~mcb_sysinfo_reply() {
  SharedDtor();
}

void mcb_sysinfo_reply::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void mcb_sysinfo_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mcb_sysinfo_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mcb_sysinfo_reply_descriptor_;
}

const mcb_sysinfo_reply& mcb_sysinfo_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mcb_2eproto();
  return *default_instance_;
}

mcb_sysinfo_reply* mcb_sysinfo_reply::default_instance_ = NULL;

mcb_sysinfo_reply* mcb_sysinfo_reply::New() const {
  return new mcb_sysinfo_reply;
}

void mcb_sysinfo_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flags_ = 0;
    if (has_common()) {
      if (common_ != NULL) common_->::mcb_sysinfo_common::Clear();
    }
  }
  clients_.Clear();
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mcb_sysinfo_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }

      // optional .mcb_sysinfo_common common = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clients;
        break;
      }

      // repeated .mcb_sysinfo_client clients = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clients()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clients;
        if (input->ExpectTag(34)) goto parse_messages;
        break;
      }

      // repeated .mcb_sysinfo_message messages = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mcb_sysinfo_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }

  // optional .mcb_sysinfo_common common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }

  // repeated .mcb_sysinfo_client clients = 3;
  for (int i = 0; i < this->clients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clients(i), output);
  }

  // repeated .mcb_sysinfo_message messages = 4;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mcb_sysinfo_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flags(), target);
  }

  // optional .mcb_sysinfo_common common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }

  // repeated .mcb_sysinfo_client clients = 3;
  for (int i = 0; i < this->clients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clients(i), target);
  }

  // repeated .mcb_sysinfo_message messages = 4;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mcb_sysinfo_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional .mcb_sysinfo_common common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  // repeated .mcb_sysinfo_client clients = 3;
  total_size += 1 * this->clients_size();
  for (int i = 0; i < this->clients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clients(i));
  }

  // repeated .mcb_sysinfo_message messages = 4;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mcb_sysinfo_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mcb_sysinfo_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mcb_sysinfo_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mcb_sysinfo_reply::MergeFrom(const mcb_sysinfo_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  clients_.MergeFrom(from.clients_);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_common()) {
      mutable_common()->::mcb_sysinfo_common::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mcb_sysinfo_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mcb_sysinfo_reply::CopyFrom(const mcb_sysinfo_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcb_sysinfo_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < clients_size(); i++) {
    if (!this->clients(i).IsInitialized()) return false;
  }
  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void mcb_sysinfo_reply::Swap(mcb_sysinfo_reply* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(common_, other->common_);
    clients_.Swap(&other->clients_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mcb_sysinfo_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mcb_sysinfo_reply_descriptor_;
  metadata.reflection = mcb_sysinfo_reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
