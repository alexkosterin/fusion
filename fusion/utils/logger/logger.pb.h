// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logger.proto

#ifndef PROTOBUF_logger_2eproto__INCLUDED
#define PROTOBUF_logger_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logger_2eproto();
void protobuf_AssignDesc_logger_2eproto();
void protobuf_ShutdownFile_logger_2eproto();

class tag;
class header;

// ===================================================================

class tag : public ::google::protobuf::Message {
 public:
  tag();
  virtual ~tag();

  tag(const tag& from);

  inline tag& operator=(const tag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tag& default_instance();

  void Swap(tag* other);

  // implements Message ----------------------------------------------

  tag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tag& from);
  void MergeFrom(const tag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional string format = 4;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 4;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // optional uint32 mid = 5;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 5;
  inline ::google::protobuf::uint32 mid() const;
  inline void set_mid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tag)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 size_;
  ::std::string* format_;
  ::google::protobuf::uint32 mid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_logger_2eproto();
  friend void protobuf_AssignDesc_logger_2eproto();
  friend void protobuf_ShutdownFile_logger_2eproto();

  void InitAsDefaultInstance();
  static tag* default_instance_;
};
// -------------------------------------------------------------------

class header : public ::google::protobuf::Message {
 public:
  header();
  virtual ~header();

  header(const header& from);

  inline header& operator=(const header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const header& default_instance();

  void Swap(header* other);

  // implements Message ----------------------------------------------

  header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const header& from);
  void MergeFrom(const header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tag tags = 1;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 1;
  inline const ::tag& tags(int index) const;
  inline ::tag* mutable_tags(int index);
  inline ::tag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::tag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::tag >*
      mutable_tags();

  // optional string comment = 2;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 2;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional string cmdline = 3;
  inline bool has_cmdline() const;
  inline void clear_cmdline();
  static const int kCmdlineFieldNumber = 3;
  inline const ::std::string& cmdline() const;
  inline void set_cmdline(const ::std::string& value);
  inline void set_cmdline(const char* value);
  inline void set_cmdline(const char* value, size_t size);
  inline ::std::string* mutable_cmdline();
  inline ::std::string* release_cmdline();
  inline void set_allocated_cmdline(::std::string* cmdline);

  // optional string date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string host = 6;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 6;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional string os = 7;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 7;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // @@protoc_insertion_point(class_scope:header)
 private:
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_cmdline();
  inline void clear_has_cmdline();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_os();
  inline void clear_has_os();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tag > tags_;
  ::std::string* comment_;
  ::std::string* cmdline_;
  ::std::string* date_;
  ::std::string* user_;
  ::std::string* host_;
  ::std::string* os_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_logger_2eproto();
  friend void protobuf_AssignDesc_logger_2eproto();
  friend void protobuf_ShutdownFile_logger_2eproto();

  void InitAsDefaultInstance();
  static header* default_instance_;
};
// ===================================================================


// ===================================================================

// tag

// required uint32 index = 1;
inline bool tag::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tag::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tag::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tag::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 tag::index() const {
  return index_;
}
inline void tag::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required string name = 2;
inline bool tag::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tag::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tag::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tag::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tag::name() const {
  return *name_;
}
inline void tag::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tag::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tag::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tag::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* tag::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tag::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 size = 3;
inline bool tag::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tag::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tag::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tag::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 tag::size() const {
  return size_;
}
inline void tag::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// optional string format = 4;
inline bool tag::has_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tag::set_has_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tag::clear_has_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tag::clear_format() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& tag::format() const {
  return *format_;
}
inline void tag::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(value);
}
inline void tag::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(value);
}
inline void tag::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tag::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  return format_;
}
inline ::std::string* tag::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tag::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mid = 5;
inline bool tag::has_mid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tag::set_has_mid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tag::clear_has_mid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tag::clear_mid() {
  mid_ = 0u;
  clear_has_mid();
}
inline ::google::protobuf::uint32 tag::mid() const {
  return mid_;
}
inline void tag::set_mid(::google::protobuf::uint32 value) {
  set_has_mid();
  mid_ = value;
}

// -------------------------------------------------------------------

// header

// repeated .tag tags = 1;
inline int header::tags_size() const {
  return tags_.size();
}
inline void header::clear_tags() {
  tags_.Clear();
}
inline const ::tag& header::tags(int index) const {
  return tags_.Get(index);
}
inline ::tag* header::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline ::tag* header::add_tags() {
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tag >&
header::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::tag >*
header::mutable_tags() {
  return &tags_;
}

// optional string comment = 2;
inline bool header::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void header::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void header::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void header::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& header::comment() const {
  return *comment_;
}
inline void header::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void header::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void header::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* header::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* header::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void header::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cmdline = 3;
inline bool header::has_cmdline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void header::set_has_cmdline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void header::clear_has_cmdline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void header::clear_cmdline() {
  if (cmdline_ != &::google::protobuf::internal::kEmptyString) {
    cmdline_->clear();
  }
  clear_has_cmdline();
}
inline const ::std::string& header::cmdline() const {
  return *cmdline_;
}
inline void header::set_cmdline(const ::std::string& value) {
  set_has_cmdline();
  if (cmdline_ == &::google::protobuf::internal::kEmptyString) {
    cmdline_ = new ::std::string;
  }
  cmdline_->assign(value);
}
inline void header::set_cmdline(const char* value) {
  set_has_cmdline();
  if (cmdline_ == &::google::protobuf::internal::kEmptyString) {
    cmdline_ = new ::std::string;
  }
  cmdline_->assign(value);
}
inline void header::set_cmdline(const char* value, size_t size) {
  set_has_cmdline();
  if (cmdline_ == &::google::protobuf::internal::kEmptyString) {
    cmdline_ = new ::std::string;
  }
  cmdline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* header::mutable_cmdline() {
  set_has_cmdline();
  if (cmdline_ == &::google::protobuf::internal::kEmptyString) {
    cmdline_ = new ::std::string;
  }
  return cmdline_;
}
inline ::std::string* header::release_cmdline() {
  clear_has_cmdline();
  if (cmdline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmdline_;
    cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void header::set_allocated_cmdline(::std::string* cmdline) {
  if (cmdline_ != &::google::protobuf::internal::kEmptyString) {
    delete cmdline_;
  }
  if (cmdline) {
    set_has_cmdline();
    cmdline_ = cmdline;
  } else {
    clear_has_cmdline();
    cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string date = 4;
inline bool header::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void header::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void header::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void header::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& header::date() const {
  return *date_;
}
inline void header::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void header::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void header::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* header::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* header::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void header::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user = 5;
inline bool header::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void header::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void header::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void header::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& header::user() const {
  return *user_;
}
inline void header::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void header::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void header::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* header::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* header::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void header::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string host = 6;
inline bool header::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void header::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void header::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void header::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& header::host() const {
  return *host_;
}
inline void header::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void header::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void header::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* header::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* header::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void header::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os = 7;
inline bool header::has_os() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void header::set_has_os() {
  _has_bits_[0] |= 0x00000040u;
}
inline void header::clear_has_os() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void header::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& header::os() const {
  return *os_;
}
inline void header::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void header::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void header::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* header::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* header::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void header::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logger_2eproto__INCLUDED
